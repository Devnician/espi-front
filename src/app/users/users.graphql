query GetUsers(
  $limit: Int
  $offset: Int
  $condition: users_bool_exp! = {}
  $orderBy: [users_order_by!] = { createdAt: desc }
) {
  users(where: $condition, limit: $limit, offset: $offset, order_by: $orderBy) {
    ...UserFields
  }

  users_aggregate(where: $condition) {
    aggregate {
      count
    }
  }
}

mutation CreateUser($input: users_insert_input!) {
  insert_users_one(object: $input) {
    ...UserFields
  }
}

mutation UpdateUser(
  $addrId: Int!
  $addressSet: addresses_set_input!
  $userId: Int!
  $userSet: users_set_input!
) {
  update_addresses_by_pk(pk_columns: { id: $addrId }, _set: $addressSet) {
    ...AddressShort
  }
  update_users_by_pk(pk_columns: { id: $userId }, _set: $userSet) {
    ...UserFields
  }
}

mutation BulkInsertUsers($objects: [users_insert_input!]!) {
  insert_users(
    objects: $objects
    on_conflict: { constraint: users_egn_key, update_columns: [] }
  ) {
    affected_rows
  }
}

fragment UserFields on users {
  id
  createdAt
  updatedAt
  name
  surname
  family
  egn
  email
  pin
  # password
  addressId
  voted
  eVoted
  votingSectionId
  roleType {
    value
    description
  }
  secondRoleType {
    value
    description
  }

  address {
    ...AddressShort
    settlement {
      ...SettlementFileds
    }
  }
  referendum_votes {
    vote
    eVote
    referendum_question {
      referendum {
        id
      }
    }
  }
}
# distributor

query countUndistributedToVotingSections {
  users_aggregate(where: { votingSectionId: { _is_null: true } }) {
    aggregate {
      count
    }
  }
}

mutation distributeUsers($arg: distribute_the_undistributed_users_new_args!) {
  distribute_the_undistributed_users_new(args: $arg) {
    id
    counter
  }
}
